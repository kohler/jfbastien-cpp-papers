<pre class='metadata'>
Title: Offsetof for Pointers to Members
Shortname: P0908
Revision: 1
Audience: LEWG
Status: D
Group: WG21
Editor: Eddie Kohler, Harvard, kohler@seas.harvard.edu
URL: https://wg21.link/P0908r0
Abstract: `mem_offsetof` is `offsetof` for pointers to members.
Markup Shorthands: markdown yes
</pre>

The `offsetof` macro, inherited from C and applicable to standard-layout
classes (and, conditionally, other classes) in C++, calculates the layout
offset of a member within a class. `offsetof` can calculate an object pointer
given a pointer to one of its members:

<xmp>

struct link {
  ...
};

struct container {
  link l;
};

container* link_container(link* x) {
  // x is known to be the .l part of some container
  uintptr_t x_address = reinterpret_cast<uintptr_t>(x);
  size_t l_offset = offsetof(container, l);
  return reinterpret_cast<container*>(x_address - l_offset);
}

</xmp>

This pattern is used in several implementations of intrusive containers, such
as Linux kernel linked lists (`struct list_head`).

Unfortunately, `offsetof` does not work for pointers to members. This won’t
compile:

<xmp>

template <class Container, class Link>
Container* generic_link_container(Link* x, Link (Container::* member)) {
  uintptr_t x_address = reinterpret_cast<uintptr_t>(x);
  size_t link_offset = offsetof(Container, member); // error!
  return reinterpret_cast<Container*>(x_address - link_offset);
}

</xmp>

Programmers currently compute pointer-to-member offsets using `nullptr` casts
(i.e., the incorrect folk implementation of `offsetof`, which invokes
undefined behavior), or by jumping through other hoops:

<xmp>

template <class Container, class Link>
Container* generic_link_container(Link* x, Link (Container::* member)) {
  ...
  alignas(Container) char container_space[sizeof(Container)] = {};
  Container* fake_container = reinterpret_cast<Container*>(container_space);
  size_t link_offset = reinterpret_cast<uintptr_t>(&(fake_container->*member))
      - reinterpret_cast<uintptr_t>(fake_container);
  ...
}

</xmp>

This document proposes a new library function, `mem_offsetof`, with the
following signature.

<xmp>

template <class T, class U>
constexpr size_t mem_offsetof(U (T::* pm)) noexcept;

</xmp>

If `pm` is a null member pointer, then the behavior of `mem_offsetof(pm)` is
undefined. Otherwise, `pm` was formed by some expression `&T::member`, and
`mem_offsetof(pm)` evaluates to the same value as `offsetof(T, member)`. As
with `offsetof`, use of `mem_offsetof` with a type `T` other than a
standard-layout class is conditionally-supported.

<xmp>

template <class Container, class Link>
Container* generic_link_container(Link* x, Link (Container::* member)) {
  uintptr_t x_address = reinterpret_cast<uintptr_t>(x);
  return reinterpret_cast<Container*>(x_address - mem_offset(member));
}

</xmp>


Proposed Wording {#word}
================

In Sizes, alignments, and offsets [**support.types.layout**], modify the first
sentence of ❡1 as follows:

<blockquote>

The macro `offsetof(type, member-designator)` has the same semantics as the
corresponding macro in the C standard library header `<stddef.h>`, but accepts
a restricted set of `type` arguments <ins> and a superset of
`member-designator` arguments </ins> in this International Standard.

</blockquote>

Add this paragraph after ❡1:

<blockquote>

<ins> An `offsetof` `member-designator` may contain pointer-to-member
expressions as well as `member-designators` acceptable in C. A
`member-designator` may begin with a prefix `.` or `.*` operator (e.g.,
`offsetof(type, .member_name)` or `offsetof(type, .*pointer_to_member)`). If
the prefix operator is omitted, `.` is assumed. </ins>

</blockquote>


Example online discussions of the issue {#disc}
=======================================

* https://groups.google.com/forum/#!topic/llvm-dev/l78RQ9zJR64
* https://gist.github.com/graphitemaster/494f21190bb2c63c5516
